/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edunova.view;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.optionalusertools.DateHighlightPolicy;
import com.github.lgooddatepicker.optionalusertools.DateVetoPolicy;
import com.github.lgooddatepicker.zinternaltools.DateVetoPolicyMinimumMaximumDate;
import com.github.lgooddatepicker.zinternaltools.HighlightInformation;
import java.awt.Color;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class ProzorTest extends javax.swing.JFrame {

    /**
     * Creates new form ProzorTest
     */
    public ProzorTest() {
        initComponents();
        
        
        primjerRadaSDateTimePicker();
        primjerRadaSKalendarPanelom();
        
    }
    
    private void primjerRadaSDateTimePicker(){
         DatePickerSettings dps = 
                new DatePickerSettings(new Locale("hr","HR"));
       
       cpnlKalendar.setSettings(dps);
       
       dps.setFormatForDatesCommonEra("dd. MM. YYYY.");
       dps.setTranslationClear("Očisti");
       dps.setTranslationToday("Danas");
      dps.setAllowKeyboardEditing(false);
	dps.setWeekNumbersDisplayed(true, true);
	dps.setHighlightPolicy(new DailyTableHighLightPolicy());
	dps.setVisibleClearButton(false);		
	dps.setVetoPolicy(new MyDateVetoPolicy());
        
        cpnlKalendar.drawCalendar();
       
       
               
    }
    
      private void primjerRadaSKalendarPanelom(){
         DatePickerSettings dps = 
                new DatePickerSettings(new Locale("hr","HR"));
       dps.setFormatForDatesCommonEra("dd. MM. YYYY.");
       dps.setTranslationClear("Očisti");
       dps.setTranslationToday("Danas");
      
       cpnlKalendar.setSettings(dps);
       
       
       
    }
      
      
      

private static class MyDateVetoPolicy implements DateVetoPolicy {

	@Override
	// Only allowed within period [now - 100days, to now + 100days]
	public boolean isDateAllowed(LocalDate date) {
		System.out.println("Checking allowed: " + date.toString());
		
		LocalDate now = LocalDate.now();
		if (date.isBefore(now.minusDays(10))) {
			return false;
		}			
		else if (date.isAfter(now.plusDays(10))) {
			return false;
		}
		else {
			return true;
		}
	}
}

private static class DailyTableHighLightPolicy implements DateHighlightPolicy {

	@Override
	// days should be painted red and green, in a chess board style
	public HighlightInformation getHighlightInformationOrNull(LocalDate date) {
		System.out.println("Checking status: " + date.toString());
		
		// On even day numbers it is red, otherwise green
		int remainder =  date.getDayOfMonth() % 2;

		if (remainder == 0) {
			return new HighlightInformation(Color.red, null, "red");
		}
		else {
			return new HighlightInformation(Color.green, null, "green");
	    }
	}
}
      
      
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbPozicije = new javax.swing.JComboBox<>();
        btnStoJeOdabrano = new javax.swing.JButton();
        dtpPocetak = new com.github.lgooddatepicker.components.DateTimePicker();
        btnZapisiVrijeme = new javax.swing.JButton();
        cpnlKalendar = new com.github.lgooddatepicker.components.CalendarPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmbPozicije.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Golman", "Napadač", "Centar" }));

        btnStoJeOdabrano.setText("Što je odabrano");
        btnStoJeOdabrano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoJeOdabranoActionPerformed(evt);
            }
        });

        btnZapisiVrijeme.setText("Zapiši vrijeme");
        btnZapisiVrijeme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZapisiVrijemeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbPozicije, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(dtpPocetak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStoJeOdabrano, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnZapisiVrijeme)
                        .addGap(15, 15, 15))))
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(cpnlKalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPozicije, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtpPocetak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnStoJeOdabrano))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnZapisiVrijeme)))
                .addGap(18, 18, 18)
                .addComponent(cpnlKalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStoJeOdabranoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoJeOdabranoActionPerformed
        JOptionPane.showMessageDialog(getRootPane(), 
                cmbPozicije.getSelectedItem()
                );
    }//GEN-LAST:event_btnStoJeOdabranoActionPerformed

    private void btnZapisiVrijemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZapisiVrijemeActionPerformed
        
        LocalDate ld = dtpPocetak.getDatePicker().getDate();
        LocalTime lt = dtpPocetak.getTimePicker().getTime();
        
        LocalDateTime fromDateAndTime = LocalDateTime.of(ld,
                                                           lt);
        
        Date datum = Date.from(fromDateAndTime.atZone(ZoneId.systemDefault()).toInstant());
        
        
        System.out.println(datum);
        
    }//GEN-LAST:event_btnZapisiVrijemeActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStoJeOdabrano;
    private javax.swing.JButton btnZapisiVrijeme;
    private javax.swing.JComboBox<String> cmbPozicije;
    private com.github.lgooddatepicker.components.CalendarPanel cpnlKalendar;
    private com.github.lgooddatepicker.components.DateTimePicker dtpPocetak;
    // End of variables declaration//GEN-END:variables
}
